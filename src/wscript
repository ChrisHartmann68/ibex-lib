#! /usr/bin/env python
# encoding: utf-8

import shutil, os

def configure (conf):
	# add "ibex/src/* " in the includes
	conf.env.append_unique ("INCLUDES", [os.path.join(conf.env.PREFIX,"src/%s") % p for p in 
		"arithmetic bisector combinatorial contractor function numeric geometry parser set strategy symbolic system tools predicate integrate".split()])
	conf.recurse("../plugins")
	
def build (bld):

	INCDIR  = "${PREFIX}/include/ibex"

	bld.env['IBEX_SRC'] = bld.path.ant_glob ("**/*.(cpp|yc|l)")	
	bld.env['IBEX_HDR'] = bld.path.ant_glob ("**/ibex_*.h")
	bld.env.IBEX_HDR.append ("ibex_Setting.h")

	# headers
	@bld.rule (
		target = "ibex_Setting.h",
		vars   = ["LP_LIB","INTERVAL_LIB"],
		# if a plugin has to add information in this file, this must be scheduled
		# after ibex_Setting_h_init
		name   = "ibex_Setting_h_init"  
	)
	def _(tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated */\n" +
			"#define _IBEX_RELEASE_ \"%s\" \n" % tsk.env['VERSION'] +
			"#define _IBEX_WITH_%s_ 1\n" % tsk.env['INTERVAL_LIB']) # +
			#TODO --> put in plugin/optim "#define _IBEX_WITH_%s_ 1\n" % tsk.env['LP_LIB'] )
	
	# add "__build__/src" in the includes, this is where ibex_Setting.h is stored
	bld.env.append_unique("INCLUDES", os.path.join(bld.bldnode.abspath(),"src"))

	# add "__build__/src/parser" in the includes, this is where parser.tab.hh is stored
	bld.env.append_unique("INCLUDES", os.path.join(bld.bldnode.abspath(),"src/parser"))
	
	bld.recurse("../plugins")

	@bld.rule (
		target = "ibex.h",
		name   = "ibex_headers",
		source = bld.env.IBEX_HDR,
		install_path = INCDIR,
	)
	def _(tsk):
		tsk.outputs[0].write (
			"// This file is automatically generated\n"
			+ "".join ('#include "%s"\n' % h.name for h in tsk.inputs))
	
	bld.install_files (INCDIR, bld.env.IBEX_HDR)
	bld.install_files (INCDIR, bld.path.ant_glob ("**/ibex_*.h_"))

	# c++ compilation
	tg_ibex = (bld.shlib if bld.env.ENABLE_SHARED else bld.stlib) (
		target = "ibex",
		use  = "gaol_objs gdtoa_objs ultim_objs filib_obj ampl_obj IBEX_DEPS",
		source = bld.env.IBEX_SRC,
		install_path = bld.env.LIBDIR,
	)

	# pkg-config file
	bld.env.include_pkgconfig=""
	for p in bld.env.INCLUDES_IBEX_DEPS + bld.env.INCLUDES:
		if p not in [os.path.join (bld.env.PREFIX, "include")]:
			bld.env.append_unique ("include_pkgconfig",p)
		
	@bld.rule (
		target = "ibex.pc",
		vars = "PREFIX VERSION INCLUDES LIBPATH_IBEX_DEPS LIB_IBEX_DEPS".split(),
		install_path = "${PREFIX}/share/pkgconfig",
	)
	def _ (tsk):
		tsk.outputs[0].write("""
prefix=%s
includedir=${prefix}/include
libdir=${prefix}/lib

Name: ibex
Description: A C++ library for interval-based algorithm design
Version: %s
Cflags: -I${includedir} -I${includedir}/ibex %s %s
Libs: -L${libdir} %s -libex %s
""" % (		tsk.env.PREFIX, tsk.env.VERSION,
		# extra CFLAGS
		# TODO: maybe remove INCLUDES ?
		" ".join(("-I%s" % p) for p in filter (os.path.isabs, tsk.env.include_pkgconfig)),
		# FIXME: are we allowed to include arbitrary cflags (other that -I) ?
		" ".join(tsk.env.CXXFLAGS_IBEX_DEPS),
		# extra LIBPATH
		" ".join(("-L%s" % p) for p in filter (os.path.isabs, tsk.env.LIBPATH_IBEX_DEPS)),
		# extra LIB
		" ".join(("-l%s" % l) for l in tsk.env.LIB_IBEX_DEPS),
	))

