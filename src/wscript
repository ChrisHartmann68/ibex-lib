#! /usr/bin/env python
# encoding: utf-8

import ibexutils
import shutil, os

def configure (conf):
	# Add all subdirectories of the 'src' directory in srcnode and bldnode in the
	# includes
	subdir = ibexutils.get_dirlist (conf.path)
	snode = conf.srcnode.make_node ("src")
	bnode = conf.bldnode.make_node ("src")
	for p in subdir:
		conf.env.append_unique ("INCLUDES_IBEX", snode.make_node(p).abspath())
		conf.env.append_unique ("INCLUDES_IBEX", bnode.make_node(p).abspath())

	# Set env variable containing the list of all ibex source files (by looking
	# recursively for all files ending with '.cpp' or '.yc' o '.l')
	ibex_src = conf.path.ant_glob ("**/*.(cpp|yc|l)")
	ibex_src =[ f.path_from (conf.path) for f in ibex_src ]
	conf.env.append_unique ('IBEX_SRC', ibex_src)

	# Set env variable containing the list of all ibex headers (by looking
	# recursively for all files starting with 'ibex_' and ending with '.h' or
	# '.h_')
	ibex_hdr = conf.path.ant_glob ("**/ibex_*.h **/ibex_*.h_")
	ibex_hdr =[ f.path_from (conf.path) for f in ibex_hdr ]
	conf.env.append_unique ('IBEX_HDR', ibex_hdr)

def build (bld):
	# c++ compilation of main lib
	tg_ibex = (bld.shlib if bld.env.ENABLE_SHARED else bld.stlib) (
		target = "ibex",
		use  = [ "IBEX", "ITV_LIB" ] + bld.env.IBEX_PLUGIN_USE_LIST,
		source = bld.env.IBEX_SRC,
		install_path = bld.env.LIBDIR,
	)

	# install headers
	bld.install_files (bld.env.INCDIR_HDR, bld.env.IBEX_HDR)

	if bld.env.WITH_JNI: 
		#            *** TO FIX ***
		# This task should go in the java plugin wscript. But I cannot
		# ensure that ibex-java is properly linked with ibex (probably 
		# because "recurse" is called before the ibex "target" exists which
		# makes the "use" flag below having no effect).
		# I have to run twice "waf install" to make it works. Otherwise I
		# get a UnsatisfiedLinkError with the java test program.
		bld.shlib (
			target = "../plugins/java/ibex-java",
			source = "../plugins/java/src/ibex_Java.cpp",
			use = "JAVA ibex",
			install_path = bld.env.LIBDIR,
		)

	# pkg-config file
	@bld.rule (
		target = "ibex.pc",
		vars = [ "PREFIX", "VERSION", "INCLUDES_IBEX_DEPS", "CXXFLAGS_IBEX_DEPS",
						"LIBPATH_IBEX_DEPS", "LIB_IBEX_DEPS" ],
		install_path = "${PREFIX}/share/pkgconfig"
	)
	def generate_pkgconfig_file (task):
		includedir = os.path.join (task.env.PREFIX, "include")
		libdir = os.path.join (task.env.PREFIX, "lib")

		outstr = "prefix=%s" % task.env.PREFIX + os.linesep
		outstr += "includedir=${prefix}/include" + os.linesep
		outstr += "libdir=${prefix}/lib" + os.linesep
		outstr += os.linesep + "Name: ibex" + os.linesep
		outstr += "Description: A C++ library for interval-based algorithm design"
		outstr += os.linesep
		outstr += "Version: %s" % task.env.VERSION + os.linesep

		outstr += "Cflags:"
		for d in task.env.INCLUDES_IBEX_DEPS:
			if os.path.isabs (d):
				if d.startswith (includedir):
					outstr += " -I${includedir}%s" % d[len(includedir):]
				else:
					outstr += " -I%s" % d
		for f in task.env.CXXFLAGS_IBEX_DEPS:
			outstr += " %s" % f
		outstr += os.linesep

		outstr += "Libs:"
		for d in task.env.LIBPATH_IBEX_DEPS:
			if os.path.isabs (d):
				if d.startswith (libdir):
					outstr += " -L${libdir}%s" % d[len(libdir):]
				else:
					outstr += " -L%s" % d
		for l in reversed(task.env.LIB_IBEX_DEPS + ["ibex"]):
			outstr += " -l%s" % l
		outstr += os.linesep

		task.outputs[0].write(outstr)
