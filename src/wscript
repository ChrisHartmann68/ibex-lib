#! /usr/bin/env python
# encoding: utf-8

import ibexutils
import shutil, os

def configure (conf):
	# add all subdirectories of "ibex/src" in the includes
	subdir = ibexutils.get_dirlist (conf.path)
	abspath_src = conf.srcnode.abspath()
	for p in subdir:
	  conf.env.append_unique ("INCLUDES", os.path.join(abspath_src, "src", p))
	
	# Set env variable containing the list of all ibex source files (by looking
	# recursively for all files ending with '.cpp' or '.yc' o '.l')
	ibex_src = conf.path.ant_glob ("**/*.(cpp|yc|l)")
	ibex_src =[ f.path_from (conf.path) for f in ibex_src ]
	conf.env.append_unique ('IBEX_SRC', ibex_src)

	# Set env variable containing the list of all ibex headers (by looking
	# recursively for all files starting with 'ibex_' and ending with '.h')
	ibex_hdr = conf.path.ant_glob ("**/ibex_*.h")
	# Add the headers ending with ".h_"
	ibex_hdr += conf.path.ant_glob ("**/ibex_*.h_")
	ibex_hdr =[ f.path_from (conf.path) for f in ibex_hdr ]
	conf.env.append_unique ('IBEX_HDR', ibex_hdr)

	# Add release version to the settings
	conf.env.settings['_IBEX_RELEASE_'] = "\""+conf.env['VERSION']+"\""

	# Add info on the interval library used to the settings
	conf.env.settings['_IBEX_WITH_%s_' % conf.env['XX_INTERVAL_LIB']] = "1"
	conf.env.settings['_INTERVAL_LIB_'] = "\""+conf.env['XX_INTERVAL_LIB']+"\""

	# Generate header file containing Ibex settings
	bldnode = conf.path.get_bld()
	bldnode.mkdir()
	setting_filename = "ibex_Setting.h"
	setting_node = bldnode.make_node (setting_filename)
	conf.env.setting_header_path = setting_node.path_from (conf.path)
	setting_node.write("/* This file is automatically generated */\n")
	setting_node.write("#ifndef __IBEX_SETTING_H__\n", flags = "a")
	setting_node.write("#define __IBEX_SETTING_H__\n", flags = "a")
	for key in conf.env.settings:
		value = conf.env.settings[key]
		setting_node.write("#define " + key + " " + value + "\n", flags="a")
	setting_node.write("#endif\n", flags = "a")
	
	# Generate the main ibex header which includes all the others headers
	header_filename = "ibex.h"
	header_node = bldnode.make_node (header_filename)
	conf.env.main_header_path = header_node.path_from (conf.path)
	header_node.write("/* This file is automatically generated */\n")
	header_node.write("#ifndef __IBEX_H__\n", flags = "a")
	header_node.write("#define __IBEX_H__\n", flags = "a")
	header_list = [ setting_node.name ]
	header_list += [ os.path.basename(header) for header in conf.env.IBEX_HDR ]
	header_str = "".join(["#include \"%s\"\n" % h for h in header_list])
	header_node.write(header_str, flags="a")
	header_node.write("#endif\n", flags = "a")

	# Add the directories containing these two headers in INCLUDES
	conf.env.append_unique ("INCLUDES", header_node.parent.abspath())
	conf.env.append_unique ("INCLUDES", setting_node.parent.abspath())

def build (bld):

	# add "__build__/src/parser" in the includes, this is where parser.tab.hh is stored
	bld.env.append_unique("INCLUDES", os.path.join(bld.bldnode.abspath(),"src/parser"))
	
	# c++ compilation of main lib
	tg_ibex = (bld.shlib if bld.env.ENABLE_SHARED else bld.stlib) (
		target = "ibex",
		use  = bld.env.IBEX_DEPS,
		source = bld.env.IBEX_SRC,
		install_path = bld.env.LIBDIR,
    lib = bld.env.IBEX_LIBS
	)	

	# install headers
	bld.install_files (bld.env.INCDIR, bld.env.IBEX_HDR)

	# Installing ibex main header and the header with settings
	bld.install_files (bld.env.INCDIR, bld.env.setting_header_path)
	bld.install_files (bld.env.INCDIR, bld.env.main_header_path)

	if bld.env.WITH_JNI: 
		#            *** TO FIX ***
		# This task should go in the java plugin wscript. But I cannot
		# ensure that ibex-java is properly linked with ibex (probably 
		# because "recurse" is called before the ibex "target" exists which
		# makes the "use" flag below having no effect).
		# I have to run twice "waf install" to make it works. Otherwise I
		# get a UnsatisfiedLinkError with the java test program.
		bld.shlib (
			target = "../plugins/java/ibex-java",
			source = "../plugins/java/src/ibex_Java.cpp",
			use = "JAVA ibex",
			install_path = bld.env.LIBDIR,
		)	

	# pkg-config file
	@bld.rule (
		target = "ibex.pc",
		vars = [ "PREFIX", "VERSION", "INCLUDES_IBEX_DEPS", "CXXFLAGS_IBEX_DEPS",
						"LIBPATH_IBEX_DEPS", "LIB_IBEX_DEPS" ],
		install_path = "${PREFIX}/share/pkgconfig"
	)
	def generate_pkgconfig_file (task):
		includedir = os.path.join (task.env.PREFIX, "include")
		libdir = os.path.join (task.env.PREFIX, "lib")

		outstr = "prefix=%s\n" % task.env.PREFIX
		outstr += "includedir=${prefix}/include\n"
		outstr += "libdir=${prefix}/lib\n"
		outstr += "\nName: ibex\n"
		outstr += "Description: A C++ library for interval-based algorithm design\n"
		outstr += "Version: %s\n" % task.env.VERSION
		
		outstr += "Cflags:"
		for d in task.env.INCLUDES_IBEX_DEPS:
			if os.path.isabs (d):
				if d.startswith (includedir):
					outstr += " -I${includedir}%s" % d[len(includedir):]
				else:
					outstr += " -I%s" % d
		for f in task.env.CXXFLAGS_IBEX_DEPS:
			outstr += " %s" % f
		outstr += "\n"

		outstr += "Libs:"
		for d in task.env.LIBPATH_IBEX_DEPS:
			if os.path.isabs (d):
				if d.startswith (libdir):
					outstr += " -L${libdir}%s" % d[len(libdir):]
				else:
					outstr += " -L%s" % d
		for l in task.env.LIB_IBEX_DEPS:
			outstr += " -l%s" % l
		outstr += "\n"

		task.outputs[0].write(outstr)
