//============================================================================
//                                  I B E X
// File        : Paving Contractor
// Author      : Benoit DESROCHERS
// Copyright   : Ensta-Bretagne (France)
// License     : See the LICENSE file
// Created     : Apr 28, 2014
// Last Update : Apr 28, 2014
//============================================================================


#ifndef __IBEX_CTC_PAVING_H__
#define __IBEX_CTC_PAVING_H__




#include "ibex_IntervalVector.h"
#include "ibex_Ctc.h"
#include "ibex_LargestFirst.h"

#include <vector>
#include <list>
#include <string>
#include <iostream>
#include <fstream>

// #include "msimpledrawer.h"


namespace ibex{

/**
 * @brief The CtcPaving class
 * This class is an implementation of the sub-paving contractor.
 * It provids 3 things:
 *  - how to compute a subpaving from a given contractor with a sivia algorithm
 *  - how to serialize (load and save) a sub paving
 *  - how to use precomputed sub-paving to contract box
 *
 * Remarks
 *  The sub-paving is represented as a tree.
 *  The contractor have to be minimal and contract the border of the sets
 */
class CtcPaving : public Ctc
{
public:

    /**
     * @brief CtcPaving : create a CtcPaving  from a precalculated subpaving in the file <filepath>
     *  This constructor create a object CtcPaving and load the file <filename>
     * @param n dimension of the contractor
     * @param filepath : path to a precomputed sub paving
     */
    CtcPaving(int n, const std::string &filepath);


    /**
     * @brief CtcPaving : Create and empty object CtcPaving
     * @param n dimension of the contractor
     */
    CtcPaving(int n);

    /**
     * @brief sivia generate the subpaving using the contractor <C> and fill its internal structure.
     * @param C Contractor to use for the sub paving generation
     * @param box initial box
     * @param eps accuracy
     */
    void sivia(Ctc& C, IntervalVector &box, double eps);


    /**
     * @brief contract interface. Contract the box <box> with respect to the subpaving prevously loadeds.
     * @param box
     */
    void contract(IntervalVector &box);



    /**
     * @brief save Wirte the sub-paving into the file <filename>
     * @param filename name of the file
     */
    void save(const std::string &filename);

    /**
     * @brief load read the file <filepath> and load the sub-paving into the internal structure
     * @param filepath
     */
    void load(const std::string &filepath);



//    void drawPaving(mSimpleDrawer *R);

private:

    /**
     * @brief init initialize the sub-paving sub structure
     * @param box initial box placed on the first node of the sub-paving structure
     */
    void init(IntervalVector &box);

    /**
     * @brief expand expand the node <i> into two sub nodes
     * @param i id of the node to be bisected
     */
    void expand(int i);

    /**
     * @brief isLeaf check if node <i> is a leaf
     * @param i id of the node to be checked
     * @return return true of the node is a leaf, false otherwise
     */
    bool isLeaf(int i);


    /**
     * @brief contract internal procedure for the contraction
     *  this procedure contracts the box <box> w.r.t the node <i>
     * @param box box to contract
     * @param i id of the node inside the sub-paving
     * @return new contracted box
     */
    IntervalVector contract(IntervalVector &box, int i);


    /**
     * @brief B : vector of boxes for storing box associated with node <i>
     */
    std::vector<IntervalVector> B;

    /**
     * @brief left vector of left son of each  node
     */
    std::vector<int> left;

    /**
     * @brief right vector of right son of each node
     */
    std::vector<int> right;

    /**
     * @brief lf bisection algorithm used for building the sub-paving inside the SIVIA
     */
    LargestFirst lf;
};


} // end namespace ibex;
#endif // __IBEX_CTC_PAVING_H__
