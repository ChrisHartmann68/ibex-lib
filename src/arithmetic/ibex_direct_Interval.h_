/* ============================================================================
 * I B E X - Implementation of the Interval class based on Profil/BIAS
 * ============================================================================
 * Copyright   : Ecole des Mines de Nantes (FRANCE)
 * License     : This program can be distributed under the terms of the GNU LGPL.
 *               See the file COPYING.LESSER.
 *
 * Author(s)   : Gilles Chabert
 * Created     : Dec 23, 2011
 * Modified by : Gilles Trombettoni, Bertrand Neveu
 * ---------------------------------------------------------------------------- */

#ifndef _IBEX_DIRECT_INTERVAL_H_
#define _IBEX_DIRECT_INTERVAL_H_

//#include "Functions.h"
//#include <float.h>
#include <cassert>
//#include "BIAS/BiasF.h"
#include <cmath>

namespace ibex {

inline void fpu_round_down() {
}

inline void fpu_round_up() {
}

inline void fpu_round_near() {
}

inline double previous_float(double x) {
	return x;
}

inline double next_float(double x) {
	return x;
}

inline Interval::Interval(const DIRECT_INTERVAL& x) : itv(x) {

}

inline Interval& Interval::operator=(const DIRECT_INTERVAL& x) {
	this->itv = x;
	return *this;
}

inline Interval& Interval::operator+=(double d) {
	if (!is_empty()) {
		if (d==NEG_INFINITY || d==POS_INFINITY) set_empty();
		else *this=Interval(lb()+d,ub()+d);
	}
	return *this;
}

inline Interval& Interval::operator-=(double d) {
	if (!is_empty()) {
		if (d==NEG_INFINITY || d==POS_INFINITY) set_empty();
		else *this=Interval(lb()-d,ub()-d);
	}
	return *this;
}

inline Interval& Interval::operator*=(double d) {
	return ((*this)*=Interval(d));
}

inline Interval& Interval::operator/=(double d) {
	return ((*this)/=Interval(d));
}

inline Interval& Interval::operator+=(const Interval& x) {
	if (is_empty()) return *this;
	else if (x.is_empty()) {
		set_empty();
		return *this; }
	else {
		*this=Interval(lb()+x.lb(),ub()+x.ub());
		return *this;
	}
}

inline Interval& Interval::operator-=(const Interval& x) {
	if (is_empty()) return *this;
	else if (x.is_empty()) {
		set_empty();
		return *this;
	}
	else {
		*this=Interval(lb()-x.ub(),ub()-x.lb());
		return *this;
	}
}

/*
 *  Multiplication
 *
 * \note Some situations where Bias/Profil may fail (underscore stands for any value): <ul>
 *  <li> <tt>[0,0] * [-inf,_]</tt>
 *  <li> <tt> [0,0] * [_,inf] </tt>
 *  <li> <tt> [-inf,_] * [_,0] </tt>
 *  <li> <tt> [_,inf] * [_,0] </tt>
 *  <li> <tt> [-0,_] * [_,inf] </tt>
 *  <li> <tt> [inf([0,0])*-1,1] * [1,inf] </tt>

 *  <li> <tt> [inf([0,0])*-1,1] * [-inf,1] </tt>
 *  </ul> */
inline Interval& Interval::operator*=(const Interval& y) {

	if (this->is_empty()||y.is_empty()) {
		set_empty();
	} else {

		double x1=this->lb(),y1=y.lb(),x2=this->ub(),y2=y.ub();
		if (x1>=0)
		{
			if  (y1>=0) {
				*this= Interval(x1*y1,x2*y2);
			}
			else
				if  (y2<=0) *this=Interval(x2*y1,x1*y2);
				else *this=  Interval(x2*y1,x2*y2);
		}
		else
			if (x2<=0)
			{
				if  (y1>=0) *this=Interval(x1*y2,x2*y1);
				else if (y2<=0) *this=Interval(x2*y2,x1*y1);
				else *this=Interval(x1*y2,x1*y1);
			}
			else
			{
				if (y1>=0) *this=Interval(x1*y2,x2*y2);
				else if (y2<=0) *this=Interval(x2*y1,x1*y1);
				else *this=Interval(min(x1*y2,x2*y1),max(x1*y1,x2*y2));
			}
	}
	return *this;
}

inline Interval& Interval::operator/=(const Interval& b) {

	if (is_empty()) return *this;
	if (b.is_empty()) { set_empty(); return *this; }

	if (b.lb()> 0)	{
		if    (this->lb()>=0)  {
			*this= Interval(this->lb()/b.ub(), this->ub()/b.lb());
		}
		else if (this->ub()<0)  {
			*this= Interval(this->lb()/b.lb(), this->ub()/b.ub());
		}
		else  {
			*this= Interval(this->lb()/b.lb(), this->ub()/b.lb());
		}
	}
	else if (b.ub()<0)	{
		if (this->lb()>=0) {
			*this= Interval(this->ub()/b.ub(), this->lb()/b.lb());
		}
		else if (this->ub()<0)  {
			*this= Interval(this->ub()/b.lb(), this->lb()/b.ub());
		}
		else {
			*this= Interval(this->ub()/b.ub(), this->lb()/b.ub());
		}
	}
	else {
		*this= Interval();
	}

	return *this;
}

inline Interval Interval:: operator-() const {
	if (is_empty()) return *this;
	return Interval(-ub(),-lb());
}

inline Interval& Interval::div2_inter(const Interval& x, const Interval& y) {
	Interval out2;
	div2_inter(x,y,out2);
	*this |= out2;
	return *this;
}

inline void Interval::set_empty() {
	*this=EMPTY_SET;
}

inline Interval& Interval::operator&=(const Interval& x) {

	if (is_empty()) return *this;
	if (x.is_empty()) { set_empty(); return *this; }
	Interval r(0,0);
	if ((this->lb()>x.ub())||(x.lb()>this->ub())) {
		set_empty();
		return *this;
	}
	if (this->lb()<=x.lb()) r.itv.inf=x.lb(); else r.itv.inf=this->lb();
	if (this->ub()>=x.ub()) r.itv.sup=x.ub(); else r.itv.sup=this->ub();
	*this=r;

	return *this;

}

inline Interval& Interval::operator|=(const Interval& x) {

	if (is_empty()) { *this=x;	return *this; }
	if (x.is_empty()) return *this;

	Interval r(0,0);
	if (this->lb()<=x.lb()) r.itv.inf=this->lb(); else r.itv.inf=x.lb();
	if (this->ub()>=x.ub()) r.itv.sup=this->ub(); else r.itv.sup=x.ub();
	*this=r;

	return *this;
}

inline double Interval::lb() const {
	return itv.inf;
}

inline double Interval::ub() const {
	return itv.sup;
}

inline double Interval::mid() const {
	if (lb()==NEG_INFINITY)
		if (ub()==POS_INFINITY) return 0;
		else return -DBL_MAX;
	else if (ub()==POS_INFINITY) return DBL_MAX;
	else {
		double m=((lb()+ub())/2);
		if (m<lb()) m=lb(); // watch dog
		else if (m>ub()) m=ub();
		return m;
	}
}

inline bool Interval::is_empty() const {
	return itv.isEmpty; //*this==EMPTY_SET;
}

inline bool Interval::is_degenerated() const {
	return is_empty() || lb()==ub();
}

inline bool Interval::is_unbounded() const {
	if (is_empty()) return false;
	return lb()==NEG_INFINITY || ub()==POS_INFINITY;
}

inline double Interval::diam() const {
	return is_empty()? 0: (is_unbounded()? POS_INFINITY : (itv.sup-itv.inf));
}

inline double Interval::mig() const {
	if (lb()>0)      return lb();
	else if (ub()<0) return -ub();
	else             return 0;
}

inline double Interval::mag() const {
    return  (fabs(lb())> fabs(ub())) ? fabs(lb()) : fabs(ub());
}

inline Interval operator&(const Interval& x1, const Interval& x2) {
	Interval res(x1);
	res &= x2;
	return res;
}

inline Interval operator|(const Interval& x1, const Interval& x2) {
	Interval res(x1);
	res &= x2;
	return res;
}

inline Interval operator+(const Interval& x, double d) {
	if (x.is_empty()) return x;
	else if (d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else {
		Interval r(x);
		r += d;
		return r;
	}
}


inline Interval operator-(const Interval& x, double d) {
	if (x.is_empty()) return x;
		else if (d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else {
		Interval r(x);
		r -= d;
		return r;
	}
}

inline Interval operator*(const Interval& x, double d) {
	if (x.is_empty()) return x;
		else if (d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else {
		Interval r(x);
		r *= d;
		return r;
	}
}

inline Interval operator/(const Interval& x, double d) {
	if (x.is_empty()) return x;
		else if (d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else {
		Interval r(x);
		r /= d;
		return r;
	}
}

inline Interval operator+(double d,const Interval& x) {
	return x+d;
}

inline Interval operator-(double d, const Interval& x) {
	if (x.is_empty()) return x;
		else if (d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else {
		Interval r(d);
		r -= x;
		return r;
	}
}

inline Interval operator*(double d, const Interval& x) {
	return x*d;
}

inline Interval operator/(double d, const Interval& x) {
	/*if (x.is_empty()) return x;
	else if (d==0 || d==NEG_INFINITY || d==POS_INFINITY) return Interval::EMPTY_SET;
	else*/
	return Interval(d)/x.itv;
}

inline Interval operator+(const Interval& x1, const Interval& x2) {
	if (x1.is_empty() || x2.is_empty())
		return Interval::EMPTY_SET;
	else {
		Interval r(x1);
		r += x2;
		return r;
	}
}

inline Interval operator-(const Interval& x1, const Interval& x2) {
	if (x1.is_empty() || x2.is_empty())
		return Interval::EMPTY_SET;
	else{
		Interval r(x1);
		r -= x2;
		return r;
	}
}

/*
 *  Multiplication
 *
 * \note Some situations where Bias/Profil may fail (underscore stands for any value): <ul>
 *  <li> <tt>[0,0] * [-inf,_]</tt>
 *  <li> <tt> [0,0] * [_,inf] </tt>
 *  <li> <tt> [-inf,_] * [_,0] </tt>
 *  <li> <tt> [_,inf] * [_,0] </tt>
 *  <li> <tt> [-0,_] * [_,inf] </tt>
 *  <li> <tt> [inf([0,0])*-1,1] * [1,inf] </tt>

 *  <li> <tt> [inf([0,0])*-1,1] * [-inf,1] </tt>
 *  </ul> */
inline Interval operator*(const Interval& x, const Interval& y) {
	return (Interval(x)*=y);
}

inline Interval operator/(const Interval& x, const Interval& y) {
	return (Interval(x)/=y);
}

inline Interval sqr(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else {
		double a1=x.lb(), a2=x.ub();
		if ((a1>=0)||(a2<=0))   return Interval(a1*a1,a2*a2);
		if (fabs(a1)>fabs(a2))  return Interval(0,a1*a1);
		else                    return Interval(0,a2*a2);
	}
}

inline Interval sqrt(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	double a1=x.lb(), a2=x.ub();
	if (a1>=0)  return (Interval(::sqrt(a1),::sqrt(a2)));
	else return (Interval(0,::sqrt(a2)));
}

inline Interval pow(const Interval& x, int n) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else if (n==0)	  return Interval::ONE;
	else if (n<0)	  return 1.0/pow(x,-n);
	else if (n==1)	  return x;
	else {
		double a1, a2;
		if (x.lb()> x.ub()) {
			a1 = x.ub() ; a2 = x.lb();
		} else {
			a1 = x.lb() ; a2 = x.ub();
		}
		if (n%2==0)	{
			if (a1*a2<0) return Interval(0,::pow(a2,n));
			else return Interval(::pow(a1,n),::pow(a2,n));
		}
		else {
			return Interval(::pow(a1,n),::pow(a2,n));
		}
	}
}

inline Interval pow(const Interval& x, double d) {
	if(d==NEG_INFINITY || d==POS_INFINITY)
		return Interval::EMPTY_SET;
	else if (d==0)
		return Interval::ONE;
	else if (d<0)
		return 1.0/pow(x,-d);
	else
		return pow(x,Interval(d));
}

inline Interval pow(const Interval &x, const Interval &y) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else return exp(y * log(x));
}

inline Interval root(const Interval& x, int den) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	if (den>0) {
		double a1, a2;
		if (x.lb()> x.ub()) {
			a1 = x.ub() ; a2 = x.lb();
		} else {
			a1 = x.lb() ; a2 = x.ub();
		}
		double n=1, m=den;
		if (n%2==0)
		{ if ((a1>=0)||(a1*a2<=0))
			return Interval(-pow(a2,n/m),pow(a2,n/m));
		else return Interval::EMPTY_SET;
		}
		else
		{ if (a1*a2<=0)
			return Interval(-pow(fabs(a1),n/m),pow(a2,n/m));
		if (a1>0) return Interval(pow(a1,n/m),pow(a2,n/m));
		else return Interval(-pow(fabs(a1),n/m),-pow(fabs(a2),n/m));
		}
	}
	else return Interval(1.0)/root(x,-den);
}

inline Interval exp(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else return Interval(::exp(x.lb()),::exp(x.ub()));
}

inline Interval log(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;

	if (x.ub()<=0)
		return Interval::EMPTY_SET;
	else {
		Interval b(abs(x));
		if (x.lb()<0) return Interval(NEG_INFINITY,::log(x.ub()));
		return Interval(::log(b.lb()),::log(b.ub()));
	}
}

inline Interval cos(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else return sin(x+Interval::HALF_PI);
}

inline Interval sin(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
    if (x.ub()==x.lb()) return Interval(::sin(x.lb()));

    double sin1,sin2,r1,r2;
    Interval b;
    //  b = Modulo(x,Interval::TWO_PI.lb());
    if ((x.lb()>=0)&&(x.lb()<Interval::TWO_PI.ub())) {
    	b= x;
    } else {
    	int k = (long)floorl((x.lb()/Interval::TWO_PI.ub()));
    	double offset = Interval::TWO_PI.ub() * k;
    	b =Interval(x.lb()-offset,x.ub()-offset);
    }

    if (x.diam()>Interval::TWO_PI.lb()) return (Interval(-1,1));
    sin1=::sin(b.lb());   sin2=::sin(b.ub());
    if ((b.lb() < 3*Interval::HALF_PI.ub())&&(b.ub() > 3*Interval::HALF_PI.ub())) r1=-1.0;
    else if ((b.lb() < 7*Interval::HALF_PI.ub())&&(b.ub() > 7*Interval::HALF_PI.ub())) r1=-1.0;
    else r1=((sin1 < sin2)? sin1 : sin2);
    if ((b.lb() < Interval::HALF_PI.ub())&&(b.ub() > Interval::HALF_PI.ub())) r2=1.0;
    else if ((b.lb() < 5*Interval::HALF_PI.ub())&&(b.ub() > 5*Interval::HALF_PI.ub())) r2=1.0;
    else r2=((sin1 > sin2)? sin1 : sin2);
    return (Interval(-1,1) & Interval(r1,r2));
}

inline Interval tan(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else return sin(x)/cos(x);
}


inline Interval cosh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else if (x.ub()==POS_INFINITY) {
		if (x.lb()<=0) return Interval(1,POS_INFINITY);
		else return Interval((::cosh(x.lb())),POS_INFINITY);
	}
	else if (x.lb()==NEG_INFINITY) {
		if (x.ub()>=0) return Interval(1,POS_INFINITY);
		else return Interval((::cosh(x.ub())),POS_INFINITY);
	}
	else if (x.lb()>=0)
		return Interval((::cosh(x.lb())),(::cosh(x.ub())));
	else if (x.ub()<=0)
		return Interval((::cosh(x.ub())),(::cosh(x.lb())));
	else
		return ((fabs(x.lb())> fabs(x.ub())) ? Interval(1,(::cosh(x.lb()))) :Interval(1,(::cosh(x.ub()))));
}

/*
//TODO
inline Interval acos(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;

//	INTERVAL r;

	if (x.ub()<-1.0 || x.lb()>1.0)
		return Interval::EMPTY_SET;
	else {
		bool minus1=x.lb()<=-1;
		bool plus1=x.ub()>=1;
		BiasArcCos(Bias(r), Bias(DIRECT_INTERVAL(minus1?-1:x.lb(), plus1?1:x.ub())));
		return Interval(plus1?0.0:Inf(r), minus1?Interval::PI.ub():Sup(r));
	}

}

//TODO
inline Interval asin(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;

//	INTERVAL r;

	if (x.ub()<-1.0 || x.lb()>1.0)
		return Interval::EMPTY_SET;
	else {
		bool minus1=x.lb()<-1;
		bool plus1=x.ub()>1;
		BiasArcSin(Bias(r), Bias(DIRECT_INTERVAL(minus1?-1:x.lb(), plus1?1:x.ub())));
		return Interval(minus1?(-Interval::HALF_PI).lb():Inf(r), plus1?Interval::HALF_PI.ub():Sup(r));
	}
}

//TODO
inline Interval atan(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else return ArcTan(x.itv);
}

//TODO
inline Interval sinh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else if (x.lb()==NEG_INFINITY) {
		if (x.ub()==POS_INFINITY) return Interval::ALL_REALS;
		else return Interval(NEG_INFINITY,Sup(Sinh(x.ub())));
	}
	else if (x.ub()==POS_INFINITY)
		return Interval(Inf(Sinh(x.lb())),POS_INFINITY);
	else
		return Sinh(x.itv);
}

//TODO
inline Interval tanh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;

	DIRECT_INTERVAL r;

	if (x.lb()==NEG_INFINITY)
		if (x.ub()==POS_INFINITY) return Interval(-1, 1);
		else {
			BiasTanh (Bias(r), Bias(DIRECT_INTERVAL(x.ub())));
			return Interval(-1,Sup(r));
		}
	else {
		if (x.ub()==POS_INFINITY) {
			BiasTanh (Bias(r), Bias(DIRECT_INTERVAL(x.lb())));
			return Interval(Inf(r),1);
		}
		else {
			BiasTanh (Bias(r), Bias(x.itv));
			return r;
		}
	}
}

//TODO
inline Interval acosh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	if (x.ub()<1.0) return Interval::EMPTY_SET;


	DIRECT_INTERVAL r;

	BiasArCosh (Bias(r), Bias(DIRECT_INTERVAL(x.lb()<1?1:x.lb(),x.ub())));
	return r;

}

//TODO
inline Interval asinh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	DIRECT_INTERVAL r;
	if (x.lb()==NEG_INFINITY)
		if (x.ub()==POS_INFINITY) return Interval::ALL_REALS;
		else {
			BiasArSinh (Bias(r), Bias(DIRECT_INTERVAL(x.ub())));
			return Interval(NEG_INFINITY,Sup(r));
		}
	else {
		if (x.ub()==POS_INFINITY) {
			BiasArSinh (Bias(r), Bias(DIRECT_INTERVAL(x.lb())));
			return Interval(Inf(r),POS_INFINITY);
		}
		else {
			BiasArSinh (Bias(r), Bias(x.itv));
			return r;
		}
	}
}

//TODO
inline Interval atanh(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;

	DIRECT_INTERVAL r;

	if (x.ub()<-1.0 || x.lb()>1.0)
		return Interval::EMPTY_SET;
	else
		if (x.lb()<=-1)
			if (x.ub()>=1)
				return Interval::ALL_REALS;
			else {
				BiasArTanh(Bias(r), Bias(DIRECT_INTERVAL(x.ub())));
				return Interval(NEG_INFINITY,Sup(r));
			}
		else
			if (x.ub()>=1) {
				BiasArTanh(Bias(r), Bias(DIRECT_INTERVAL(x.lb())));
				return Interval(Inf(r), POS_INFINITY);
			}

	BiasArTanh (Bias(r), Bias(x.itv));
	return r;
}
*/
inline Interval abs(const Interval &x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	else {
		double a1=x.lb(), a2=x.ub();
		if ((a1>=0)||(a2<=0))   return Interval(fabs(a1),fabs(a2));
		if (fabs(a1)>fabs(a2))  return Interval(0,fabs(a1));
		else                    return Interval(0,fabs(a2));
	}
}

inline Interval max(const Interval& x, const Interval& y) {
	if (x.is_empty() || y.is_empty()) return Interval::EMPTY_SET;
	else return Interval(x.lb()>y.lb()? x.lb() : y.lb(), x.ub()>y.ub()? x.ub() : y.ub());
}

inline Interval min(const Interval& x, const Interval& y) {
	if (x.is_empty() || y.is_empty()) return Interval::EMPTY_SET;
	else return Interval(x.lb()<y.lb()? x.lb() : y.lb(), x.ub()<y.ub()? x.ub() : y.ub());
}

inline Interval integer(const Interval& x) {
	if (x.is_empty()) return Interval::EMPTY_SET;
	double l=x.lb()==NEG_INFINITY? NEG_INFINITY : ceil(x.lb());
	double r=x.ub()==POS_INFINITY? POS_INFINITY : floor(x.ub());
	if (l>r) return Interval::EMPTY_SET;
	else return Interval(l,r);
}

inline bool bwd_mul(const Interval& y, Interval& x1, Interval& x2) {
	if (y.contains(0)) {
		if (!x2.contains(0))                           // if y and x2 contains 0, x1 can be any double number.
			if (x1.div2_inter(y,x2).is_empty()) { x2.set_empty(); return false; }  // otherwise y=x1*x2 => x1=y/x2
		if (x1.contains(0)) return true;
		if (x2.div2_inter(y,x1).is_empty()) { x1.set_empty(); return false; }
		else return true;
	} else {
		if (x1.div2_inter(y,x2).is_empty()) { x2.set_empty(); return false; }
		if (x2.div2_inter(y,x1).is_empty()) { x1.set_empty(); return false; }
		else return true;
	}
}

inline bool bwd_sqr(const Interval& y, Interval& x) {

	Interval proj=sqrt(y);
	Interval pos_proj= proj & x;
	Interval neg_proj = (-proj) & x;

	x = pos_proj | neg_proj;

	return !x.is_empty();
}

inline bool bwd_pow(const Interval& y, int expon, Interval& x) {

	if (expon % 2 ==0) {
		Interval proj=root(y,expon);
		Interval pos_proj= proj & x;
		Interval neg_proj = (-proj) & x;

		x = pos_proj | neg_proj;

		return !x.is_empty();

	} else {

		x &= root(y, expon);
		return !x.is_empty();

	}
}

inline bool bwd_pow(const Interval& , Interval& , Interval& ) {
	not_implemented("warning: bwd_power(y,x1,x2) (with x1 and x2 intervals) not implemented yet with DIRECT");
	return true;
}

/**
 * ftype:
 *   COS = 0
 *   SIN = 1
 *   TAN = 2
 */
inline bool bwd_trigo(const Interval& y, Interval& x, int ftype) {

	const int COS=0;
	const int SIN=1;
	const int TAN=2;

	Interval period_0, nb_period;

	switch (ftype) {
	case COS :
		period_0 = acos(y); break;
	case SIN :
		period_0 = asin(y); break;
	case TAN :
		period_0 = atan(y); break;
	default : 
		assert(false); break;
	} 

	if (period_0.is_empty()) { x.set_empty(); return false; }

	if (x.lb()==NEG_INFINITY || x.ub()==POS_INFINITY) return true; // infinity of periods

	switch (ftype) {
	case COS :
		nb_period = x / Interval::PI; break;
	case SIN :
		nb_period = (x+Interval::HALF_PI) / Interval::PI; break;
	case TAN :
		nb_period = (x+Interval::HALF_PI) / Interval::PI; break;
	default :
		assert(false); break;
	}
	
	int p1 = ((int) nb_period.lb())-1;
	int p2 = ((int) nb_period.ub());
	Interval tmp1, tmp2;

	bool found = false;
	int i = p1-1;

	switch(ftype) {
	case COS :
		// should find in at most 2 turns.. but consider rounding !
		while (++i<=p2 && !found) found = !(tmp1 = (x & (i%2==0? period_0 + i*Interval::PI : (i+1)*Interval::PI - period_0))).is_empty();
		break;
	case SIN :
		while (++i<=p2 && !found) found = !(tmp1 = (x & (i%2==0? period_0 + i*Interval::PI : i*Interval::PI - period_0))).is_empty();
		break;
	case TAN :
		while (++i<=p2 && !found) found = !(tmp1 = (x & (period_0 + i*Interval::PI))).is_empty();
		break;
	}

	if (!found) { x.set_empty(); return false; }
	found = false;
	i=p2+1;

	switch(ftype) {
	case COS :
		while (--i>=p1 && !found) found = !(tmp2 = (x & (i%2==0? period_0 + i*Interval::PI : (i+1)*Interval::PI - period_0))).is_empty();
		break;
	case SIN :
		while (--i>=p1 && !found) found = !(tmp2 = (x & (i%2==0? period_0 + i*Interval::PI : i*Interval::PI - period_0))).is_empty();
		break;
	case TAN :
		while (--i>=p1 && !found) found = !(tmp2 = (x & (period_0 + i*Interval::PI))).is_empty();
		break;
	}

	if (!found) {  x.set_empty(); return false; }

	x = tmp1 | tmp2;

	return true;
}

inline bool bwd_cos(const Interval& y,  Interval& x) {
	return bwd_trigo(y,x,0);
}

inline bool bwd_sin(const Interval& y,  Interval& x) {
	return bwd_trigo(y,x,1);
}

inline bool bwd_tan(const Interval& y,  Interval& x) {
	return bwd_trigo(y,x,2);
}

inline bool bwd_cosh(const Interval& y,  Interval& x) {

	Interval proj=acosh(y);
	if (proj.is_empty()) return false;
	Interval pos_proj= proj & x;
	Interval neg_proj = (-proj) & x;

	x = pos_proj | neg_proj;

	return !x.is_empty();
}

inline bool bwd_sinh(const Interval& y,  Interval& x) {
	x &= asinh(y);
	return !x.is_empty();
}

inline bool bwd_tanh(const Interval& y,  Interval& x) {
	x &= atanh(y);
	return !x.is_empty();
}



inline bool bwd_abs(const Interval& y,  Interval& x) {
	Interval x1 = x & y;
	Interval x2 = x & (-y);
	x &= x1 | x2;
	return !x.is_empty();
}

} // end namespace

#endif /* _IBEX_BIAS_DIRECT_INTERVAL_H_ */
