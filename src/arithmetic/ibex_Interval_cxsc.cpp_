/* ============================================================================
 * I B E X - Implementation of the Interval class based on CXSC
 * ============================================================================
 * Copyright   : Ecole des Mines de Nantes (FRANCE)
 * License     : This program can be distributed under the terms of the GNU LGPL.
 *               See the file COPYING.LESSER.
 *
 * Author(s)   : Jordan Ninin
 * Created     : June 9, 2016
 * ---------------------------------------------------------------------------- */


namespace ibex {


/**
 * IMPORTANT:
 *
 * Due to the "static initialization order fiasco", it is unsafe 
 * to define static variable with static variable from a another library.
 *
 */
const Interval Interval::EMPTY_SET(cxsc::_unchecked_interval(2.0,1.0));
const Interval Interval::ALL_REALS(cxsc::interval(-(cxsc::Infinity), (cxsc::Infinity)));
const Interval Interval::NEG_REALS(cxsc::interval(-(cxsc::Infinity), 0.0));
const Interval Interval::POS_REALS(cxsc::interval(0.0, (cxsc::Infinity)));
const Interval Interval::ZERO(cxsc::interval(cxsc::real(0.0)));
const Interval Interval::ONE(cxsc::interval(cxsc::real(1.0)));

const Interval Interval::PI(cxsc::Pi_interval);
	
const Interval Interval::TWO_PI (cxsc::Pi2_interval);

const Interval Interval::HALF_PI(cxsc::Pid2_interval);


std::ostream& operator<<(std::ostream& os, const Interval& x) {
	if (x.is_empty())
		return os << "[ empty ]";
	else
		return os << x.itv;
}

} // end namespace

